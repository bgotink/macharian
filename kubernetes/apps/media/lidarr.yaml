apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: lidarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      lidarr:
        pod:
          imagePullSecrets:
            - name: ghcr-image-credentials
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16
            envFrom:
              - secretRef:
                  name: lidarr-init-db-secrets
        containers:
          app:
            image:
              repository: ghcr.io/bgotink/lidarr-develop
              tag: 2.7.1.4417@sha256:bc7a4e5d415d212dbfba25a617f3ffa1dc8a24e79a3eb315299315577572e090
            env:
              LIDARR__APP__INSTANCENAME: Lidarr
              LIDARR__APP__THEME: dark
              LIDARR__AUTH__METHOD: External
              LIDARR__AUTH__REQUIRED: DisabledForLocalAddresses
              LIDARR__LOG__LEVEL: info
              LIDARR__SERVER__PORT: &port 8686
              LIDARR__UPDATE__BRANCH: develop
              TZ: ${TIMEZONE}
            envFrom:
              - secretRef:
                  name: lidarr-db-secrets
            probes:
              liveness: &probe
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probe
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 2Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: lidarr
        ports:
          http:
            port: *port
    ingress:
      app:
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/appName: Music Tracker
          hajimari.io/instance: "admin"
          hajimari.io/group: "media"
          hajimari.io/icon: token:music
          nginx.ingress.kubernetes.io/auth-url: |-
              http://ak-outpost-authentik-embedded-outpost.auth.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: |-
              https://lidarr.${SECRET_HOST}/outpost.goauthentik.io/start?rd=$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-response-headers: |-
              Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
          nginx.ingress.kubernetes.io/auth-snippet: |
              proxy_set_header X-Forwarded-Host $http_host;
        hosts:
          - host: lidarr.${SECRET_HOST}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        type: persistentVolumeClaim
        accessMode: ReadWriteOncePod
        size: 1Gi
      tmp:
        type: emptyDir
      media:
        existingClaim: warp-media-data
        globalMounts:
          - path: /data/media
