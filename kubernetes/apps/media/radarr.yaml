apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: radarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 4.2.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-labs
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    global:
      # Added to keep PVC names aligned in migration app-template v3 to v4
      alwaysAppendIdentifierToResourceName: true

    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17
            envFrom:
              - secretRef:
                  name: radarr-init-db-secrets
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/radarr
              tag: 5.27.4.10176@sha256:4b9c3548ff82a9f3e4ccdabb2d7044da8167c42003ac96164c3e1a5287730538
            env:
              RADARR__APP__INSTANCENAME: Radarr
              RADARR__APP__THEME: dark
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              RADARR__LOG__DBENABLED: "False"
              RADARR__LOG__LEVEL: info
              RADARR__SERVER__PORT: &port 8989
              RADARR__UPDATE__BRANCH: develop
              TZ: ${TIMEZONE}
            envFrom:
              - secretRef:
                  name: radarr-db-secrets
            probes:
              liveness: &probe
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probe
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 2Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: { type: RuntimeDefault }
    service:
      radarr:
        controller: radarr
        ports:
          http:
            port: *port
    ingress:
      radarr:
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/appName: Movies Tracker
          hajimari.io/instance: "admin"
          hajimari.io/group: "media"
          hajimari.io/icon: simple-icons:radarr
          nginx.ingress.kubernetes.io/auth-url: |-
              http://ak-outpost-authentik-embedded-outpost.auth.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
          nginx.ingress.kubernetes.io/auth-signin: |-
              https://radarr.${SECRET_HOST}/outpost.goauthentik.io/start?rd=$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-response-headers: |-
              Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
          nginx.ingress.kubernetes.io/auth-snippet: |
              proxy_set_header X-Forwarded-Host $http_host;
        hosts:
          - host: radarr.${SECRET_HOST}
            paths:
              - path: /
                service:
                  identifier: radarr
                  port: http
    persistence:
      config:
        type: persistentVolumeClaim
        accessMode: ReadWriteOncePod
        size: 1Gi
      tmp:
        type: emptyDir
      media:
        existingClaim: warp-media-data
        globalMounts:
          - path: /data/media
